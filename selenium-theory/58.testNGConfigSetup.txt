/*
 * Importance of testNg
 * installation and configuration in eclipse
 * testng xml file importance
 * include exclude mechanism
 * understanding testng annotations
 * groups
 * data provider annotation
 * annotation helper attributes
 * parameterization in testng xml file
 * running tests in parallel with testng
 * 
 * 
 * testng.org - is official website
 * 
 * go to help--eclipse market place -- search testNg and install and restart eclipse
 * to check if already installed - windows -preferences - search testng if found its installed
 */

Now create a java project and a package called test and create a class 

____________________________________________________________________________________________
@Test is considered as a test case


Create testNG file
right click on project --> testNG -->Convert to TestNg -->Next --> Finish
testng.xml file will be created , this should be at project level

TestSuite--> Test Folder(Module) -->testcases  [structure of testNg file]

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE suite SYSTEM "https://testng.org/testng-1.0.dtd">
<suite name="Suite">
  <test thread-count="5" name="Test">
    <classes>
      <class name="test.TestNg1"/>     ---> packageName.classname
    </classes>
  </test> <!-- Test -->
</suite> <!-- Suite -->

Lets add one more java test file called TestNg2.java
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE suite SYSTEM "https://testng.org/testng-1.0.dtd">
<suite name="Suite">
  <test thread-count="5" name="Test">
    <classes>
      <class name="test.TestNg1"/>     ---> packageName.classname
	<class name="test.TestNg1"/>
    </classes>
  </test> <!-- Test -->
</suite> <!-- Suite -->

Now our testng.xml file looks as above , then we can run all testcases at once
RightClick --> run as testNg Suite
____________________________________________________________________________________________

priortizing testcases with testNg
create seperate <test></test> and place the classes inside it
skip one testcase from a class file
we use exclude tag and pass method name that we want to skip


<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE suite SYSTEM "https://testng.org/testng-1.0.dtd">
<suite name="Suite">
	<test thread-count="5" name="Test">
		<classes>
			<class name="test.TestNg1" />
			<class name="test.TestNg2" />
			<!-- class name="packageName.className"/>-->
		</classes>
	</test> <!-- Test -->
	<test name="Car Loan">
		<classes>
			<class name="test.TestNg3">
				<methods>
					<exclude name="MobileLogin"></exclude>
				</methods>
			</class>
		</classes>
	</test>
</suite> <!-- Suite -->

we also have include
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE suite SYSTEM "https://testng.org/testng-1.0.dtd">
<suite name="Suite">
	<test thread-count="5" name="Test">
		<classes>
			<class name="test.TestNg1" />
			<class name="test.TestNg2" />
			<!-- class name="packageName.className"/>-->
		</classes>
	</test> <!-- Test -->
	<test name="Car Loan">
		<classes>
			<class name="test.TestNg3">
				<methods>
					<include name="LoginAPILoan"></include>
				</methods>
			</class>
		</classes>
	</test>
</suite> <!-- Suite -->
____________________________________________________________________________________________

Executing testcases at package level with regex



All testcases starting with Mobile will be excluded as we are using Mobile.* in exclude

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE suite SYSTEM "https://testng.org/testng-1.0.dtd">
<suite name="Suite">
	<test thread-count="5" name="Test">
		<classes>
			<class name="test.TestNg1" />
			<class name="test.TestNg2" />
			<!-- class name="packageName.className"/>-->
		</classes>
	</test> <!-- Test -->
	<test name="Car Loan">
		<classes>
			<class name="test.TestNg3">
				<methods>
					<exclude name="Mobile.*"></exclude>
				</methods>
			</class>
		</classes>
	</test>
</suite> <!-- Suite -->


we can run whole package using below 

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE suite SYSTEM "https://testng.org/testng-1.0.dtd">
<suite name="Suite">

	<test name="Loan">
		<packages>
			<package name="test"></package>
<!--package name="packagename"/>
		</packages>
	</test>
</suite> <!-- Suite -->
__________________________________________________________________________________
TestNG Annotations:

@BeforeTest
	public void prerequisite() {
		System.out.println("I will execute first");
	}
	//runs before any testcase present inside the test of xml, starting server , any prerequsite steps
	
	@AfterTest
	public void lastexection() {
		System.out.println("I will execute last ");
	}
	//runs after all the testcase present inside test of xml

//environmental details will be executed in beforeSuite
	@BeforeSuite
	public void beforesuite() {
		System.out.println("First executed");
	}
	@AfterSuite
	public void afterSuite() {
		System.out.println("last executed");
	}
	//scope of beforesuite and aftersuite is entire xml file



@BeforeMethod and @AfterMethod - specific to class file

@BeforeClass and @AfterClass - depends on class file and runs before the class and after the class

TestMethods run in alphabetical order in testng
____________________________________________________________________________________________
Groups functionality in testNG

we can use include and exclude in groups inside run

 
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE suite SYSTEM "https://testng.org/testng-1.0.dtd">
<suite name="Suite">

	<test name="Regression">
		<groups>
			<run>
				<include name="Smoke" />
			</run>
		</groups>
		<classes>

			<class name="test.TestNg1"></class>
			<class name="test.TestNg2"></class>
			<class name="test.TestNg3"></class>
		</classes>
	</test>
</suite> <!-- Suite -->

@Test(groups= {"Smoke"})
	public void sayHi() {
		System.out.println("Hi");
	}
____________________________________________________________________________________________

Annotations Helper attributes with examples - dependsOnMethods , enabled , timeOut

@Test(dependsOnMethods= {"sayBye","sayHi"})
	public void sayHello() {
		System.out.println("Hello");
	}
now this test method will execute only after the two mentioned methods get executed first

@Test(enabled=false)
	public void enableDemo() {
		System.out.println("disabled because we already know its functionality is not working");
	}

enabled attribute helps to disable a particular test , so that it wont get executed as we already know that there is a particular bug in application related testcase will be disabled

@Test(timeOut=4000)
	public void setSomeTime() {
		System.out.println("disabled because we already know its functionality is not working");
	}
This timeOut attribute will make testcase wait for some 4 seconds before failing
____________________________________________________________________________________________
parameterizing from TestNG xml file:

If we have some values common for all testcases , like url,api keys that is global environmental variables
we can define them in testng.xml file

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE suite SYSTEM "https://testng.org/testng-1.0.dtd">
<suite name="Suite">
<-- this below steps helps in parameter passing-->
	<parameter name="URL" value="qaclickacademy.com" />
	<test thread-count="5" name="Test">
		<classes>
			<class name="test.TestNg1" />
			<class name="test.TestNg2" />
			<!-- class name="packageName.className"/>-->
		</classes>
	</test> <!-- Test -->
	<test name="Car Loan">
		<classes>
			<class name="test.TestNg3">
				<methods>
					<exclude name="Mobile.*"></exclude>
				</methods>
			</class>
		</classes>
	</test>
</suite> <!-- Suite -->

package test;

import org.testng.annotations.Parameters;
import org.testng.annotations.Test;


public class TestNg1 {
//below tag should be specified to use it
	@Parameters({"URL"})
	@Test
	public void Demo(String urlName) {
		System.out.println("hello  "+ urlName);//automation code
	}
	
	@Test(groups= {"Smoke"})
	public void SecondTest() {
		System.out.println("Bye");
	}

we can also define at the testcase level

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE suite SYSTEM "https://testng.org/testng-1.0.dtd">
<suite name="Suite">
	
	<test thread-count="5" name="Test">
<-- defining at testcase level-->
		<parameter name="URL" value="www.url1.com" />
		<classes>
			<class name="test.TestNg1" />
			<class name="test.TestNg2" />
			<!-- class name="packageName.className"/>-->
		</classes>
	</test> <!-- Test -->
	<test name="Car Loan">
<-- defining at testcase level-->
		<parameter name="URL" value="www.url2.com" />
		<classes>
			<class name="test.TestNg3">
				<methods>
					<include name="Mobile.*"></include>
			</methods>
			</class>
		</classes>
	</test>
</suite> <!-- Suite -->
_______________________________________________________________________________________
Dataprovider annotation - parameterizing testcases

pass parameters at method level means to every test , we need not make our testng.xml file complex , 
passing multiple test data

package test;

import org.testng.annotations.DataProvider;
import org.testng.annotations.Parameters;
import org.testng.annotations.Test;

public class TestNg3 {

	@Test
	public void WebLogin() {
		// selenium code
		System.out.println("WebLoginHome");
	}

	@Test
	public void MobileLogin() {
		// appium
		System.out.println("Mobile Login");

	}

	
	@Test
	public void MobileSignOut() {
		// appium
		System.out.println("Mobile Login" );

	}

	@Test(dataProvider = "getData")
	public void MobileProcess(String username,String password) {
		// appium
		System.out.println("Mobile Login");
		System.out.println(username  +  " "+password);

	}

	@Test
	public void LoginAPILoan() {
		// rest api code
		System.out.println("API Login");
	}

	// we can our same test multiple times with different data using dataprovider
	@DataProvider
	public Object[][] getData() {
		// 1st combination - username passowrd - good credit history
		// 2nd ussername password - no credit history
		// 3rd fraudlent credit history

		Object[][] data = new Object[3][2];
		data[0][0] = "firstSetUserName";
		data[0][1] = "password";

		data[1][0] = "secondUserName";
		data[1][1] = "password1";
		
		data[2][0] = "thirdUserName";
		data[2][1] = "password2";
		
		return data;
	}
}



____________________________________________________________________________________________
Listeners interface in TestNG Framework:
Whenever testcase fails then we can write some script that either prints all logs or takes a screen shot

Listener listens to our testcases when it finds , some testcase is failed it listen to that testcase and invoke some method what to be done on success , on failure

/*

package Test;

import org.testng.ITestListener;

public class Listener implements ITestListener {

}

Still if anyone else not getting unimplemented methods of autosuggestion for "ITestListener". Then please do this below setup-

Right click >Source>Override/Implements method..now a popup will be open, just check ITestListener checkbox & ok.

*/


<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE suite SYSTEM "https://testng.org/testng-1.0.dtd">
<suite name="Suite">
	<!-- For listeners include below code-->
	<listeners>
		<listener class-name="test.Listener"></listener>
	</listeners>
	<!-- For listeners include below code-->
	<parameter name="URL" value="qaclickacademy.com" />
	<test thread-count="5" name="Test">
		<parameter name="URL" value="www.url1.com" />
		<classes>
			<class name="test.TestNg1" />
			<class name="test.TestNg2" />
			<!-- class name="packageName.className"/>-->
		</classes>
	</test> <!-- Test -->
	<test name="Car Loan">
		<parameter name="URL" value="www.url2.com" />
		<classes>
			<class name="test.TestNg3">
				<methods>
					<include name="Mobile.*"></include>
				</methods>
			</class>
		</classes>
	</test>
</suite> <!-- Suite -->



package test;

import org.testng.ITestContext;
import org.testng.ITestListener;
import org.testng.ITestResult;

/*
 * Still if anyone else not getting unimplemented methods of autosuggestion for "ITestListener". Then please do this below setup-

Right click >Source>Override/Implements method..now a popup will be open, just check ITestListener checkbox & ok.
 */
//ITestListener interface which implements TestNG listener
public class Listener implements ITestListener {

	@Override
	public void onTestStart(ITestResult result) {
		// TODO Auto-generated method stub
		ITestListener.super.onTestStart(result);
	}

	@Override
	public void onTestSuccess(ITestResult result) {
		// TODO Auto-generated method stub
		ITestListener.super.onTestSuccess(result);
		System.out.println("I successfully executedlisteners pass code");
	}

	@Override
	public void onTestFailure(ITestResult result) {
		// TODO Auto-generated method stub
		ITestListener.super.onTestFailure(result);
		
		//screenshot code
	}

	@Override
	public void onTestSkipped(ITestResult result) {
		// TODO Auto-generated method stub
		ITestListener.super.onTestSkipped(result);
	}

	@Override
	public void onTestFailedButWithinSuccessPercentage(ITestResult result) {
		// TODO Auto-generated method stub
		ITestListener.super.onTestFailedButWithinSuccessPercentage(result);
	}

	@Override
	public void onTestFailedWithTimeout(ITestResult result) {
		// TODO Auto-generated method stub
		ITestListener.super.onTestFailedWithTimeout(result);
	}

	@Override
	public void onStart(ITestContext context) {
		// TODO Auto-generated method stub
		ITestListener.super.onStart(context);
	}

	@Override
	public void onFinish(ITestContext context) {
		// TODO Auto-generated method stub
		ITestListener.super.onFinish(context);
	}

}


_____________________________________________________________________________________________________________




In Listener.java file : //to get the name of testcase failed we can use result.getName()

	@Override
	public void onTestFailure(ITestResult result) {
		// TODO Auto-generated method stub
		ITestListener.super.onTestFailure(result);
		
		//to get the name of testcase failed we can use result.getName()
		System.out.println(result.getName());
		
		//screenshot code
	}



running tests in parallel  and generating reports:

<suite name="Suite" parallel="tests" thread-count="2">

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE suite SYSTEM "https://testng.org/testng-1.0.dtd">
<!-- to run test cases in parallel  use below step parallel and thread-count-->
<suite name="Suite" parallel="tests" thread-count="2">
	<!-- For listeners include below code-->
	<listeners>
		<listener class-name="test.Listener"></listener>
	</listeners>
	<!-- For listeners include below code-->
	<parameter name="URL" value="qaclickacademy.com" />
	<test thread-count="5" name="Test">
		<parameter name="URL" value="www.url1.com" />
		<classes>
			<class name="test.TestNg1" />
			<class name="test.TestNg2" />
			<!-- class name="packageName.className"/>-->
		</classes>
	</test> <!-- Test -->
	<test name="Car Loan">
		<parameter name="URL" value="www.url2.com" />
		<classes>
			<class name="test.TestNg3">
				<methods>
					<include name="Mobile.*"></include>
				</methods>
			</class>
		</classes>
	</test>
</suite> <!-- Suite -->


to run classes parallel
<test name="Car Loan" parallel="classes" thread-count="2">


_____________________________________________________________________________________________________________
inside the test-output folder we have index.html file we can open in chrome and see the generated reports














