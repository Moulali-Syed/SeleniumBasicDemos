TestNG:is a testing framework
TestNg helps controlling testcase execution from testng xml files

============================================================================================================================================================
eclispe market place --> search testNg and install and restart the eclipse

To check if testng is installed go to windows--> preferences search testng  , it will be present

============================================================================================================================================================
Running testcases in TestNG without java compiler:


create a java project --> TestNGTutorial  , create a package in src-->as test

because of main method , our test is running in java compiler , without using it
we can use testng annotations

testng itself act as compiler , at backend it still uses java compiler

package test;

import org.testng.annotations.Test;

public class Day1 {
	
	@Test
	public void demo() {
		System.out.println("hello");//we will write some automation code here
	}

}


we can run this testcase by right click , run as testng Test

============================================================================================================================================================
Importance of xml file in TestNG configuration:

In java we have to create different classes for different testcases

but in testNg we can differentiate testcases by simply using the @Test annotation , this differentiate the testcases


import org.testng.annotations.Test;

public class Day1 {
	
	@Test
	public void demo() {
		System.out.println("hello");//we will write some automation code here
	}
	
	@Test
	public void SecondTest() {
		System.out.println("Bye");
	}

}

we can run all testcases at once using testng.xml file
Right click on project --> TestNG --> Convert to TestNG  --> Finish 
This will create a readymade testng.xml file


<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE suite SYSTEM "https://testng.org/testng-1.0.dtd">
<suite name="Suite">           <!-- suite is like the complete project/ collection of test folders -->
  <test  name="Test">		 <!-- is like modules/test folders , name we can give any name based on the categorization , suppose personalLoan , HomeLoan  -->
    <classes>			 <!-- inside classes we can have multiple classes -->
      <class name="test.Day1"/> <!--  name="packageName.className -->
    </classes>
  </test> <!-- Test -->
</suite> <!-- Suite -->


There can be multiple folders inside a project
lets suppose we have a Suite Loan Department , inside it we can have multiple sub folders called test , like personal Loan , HomeLoan

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE suite SYSTEM "https://testng.org/testng-1.0.dtd">
<suite name="Loan Department">
  <test  name="Personal Loan">
    <classes>
      <class name="test.Day1"/>
	  <class name="test.Day2"/>
    </classes>
  </test> 
</suite> 

What if client wants us to run all the personal loan folder testcases , instead of running testcases one by one we can run them
thru testng.xml file
Go to testng.xml file --> right click --> run as --> TestNG Suite


============================================================================================================================================================
prioritizing testcases with TestNG:

an example testng.xml file with three folders under a suite

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE suite SYSTEM "https://testng.org/testng-1.0.dtd">
<suite name="Loan Department">
	<test name="Personal Loan">
		<classes>
			<class name="test.Day1" />
			<class name="test.Day2" />
		</classes>
	</test>
	<test name="Car Loan">
		<classes>
			<class name="test.Day3"></class>
		</classes>
	</test>
	<test name="Home Loan">
		<classes>
			<class name="test.Day4"></class>
		</classes>
	</test>
</suite> 





============================================================================================================================================================
Include Exclude mechansim to control testcases:
Suppose i have 3 @Test methods inside a class , if i want to exclude one @Test method from getting executed , we can do it using exclude tag

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE suite SYSTEM "https://testng.org/testng-1.0.dtd">
<suite name="Loan Department">
	<test name="Personal Loan">
		<classes>
			<class name="test.Day1" />
			<class name="test.Day2" />
			<class name="test.Day4" />
		</classes>
	</test>
	<test name="Car Loan">
		<classes>
			<class name="test.Day3">
				<methods>
					<exclude name="MobileLoginCarLoan"></exclude>
				</methods>
			</class>
		</classes>
	</test>

</suite> 


inside class tag create methods tag inside it create exclude tag and provide the methodname we want to exclude  , as below
<class name="test.Day3">
		<methods>
			<exclude name="MobileLoginCarLoan"></exclude>
		</methods>
</class>

Thus we get a control to run whatever testcases were want to run


similarly we have include tag
<test name="Car Loan">
		<classes>
			<class name="test.Day3">
				<methods>
					<include name="MobiiLnoginCarLoan"></include>
				</methods>
			</class>
		</classes>
	</test>

this will run only , MobiiLnoginCarLoan method only


============================================================================================================================================================
Executing testcases at package level with regex:
Mobile.*  ---> .* represents anything after Mobile

Suppose we have a class that has so many @Test methods , if all names of these methods are starting with Mobile , we can use
regex and exclude them 

package test;

import org.testng.annotations.Test;

public class Day3 {

	@Test
	public void WebLoginCarLoan() {
		System.out.println("Web Login Car");
	}

	@Test
	public void MobileLoginCarLoan() {
		System.out.println("Mobile Login Car");
	}

	@Test
	public void MobileSigninCarLoan() {
		System.out.println("Mobile SignIn Car");
	}

	@Test
	public void MobilesignoutCarLoan() {
		System.out.println("Mobile Signout Car");
	}

	@Test
	public void LoginAPICarLoan() {
		System.out.println("Api Login Car");
	}
}


<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE suite SYSTEM "https://testng.org/testng-1.0.dtd">
<suite name="Loan Department">
	<test name="Personal Loan">
		<classes>
			<class name="test.Day1" />
			<class name="test.Day2" />
			<class name="test.Day4" />
		</classes>
	</test>
	<test name="Car Loan">
		<classes>
			<class name="test.Day3">
				<methods>
					<exclude name="Mobile.*"></exclude>
				</methods>
			</class>
		</classes>
	</test>

</suite> 


the @Test methods starting with Mobile will not get executed

we can execute all testcases at package level , instead of defining class inside the classes inside test

create a testng2.xml file

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE suite SYSTEM "https://testng.org/testng-1.0.dtd">
<suite name="Loan Department">
	<test name="Personal Loan">

		<packages>
			<package name="test"></package>
		</packages>
	</test>

</suite> 

<!-- use ful to run regression tests-->

============================================================================================================================================================

TestNG Annotations:

scope is test -- in testng.xml file
@BeforeTest  ---> runs before test folder in testng.xml file

Before executing any class files in this folder it will execute @BeforeTest
<test name="Personal Loan">

		<packages>
			<package name="test"></package>
		</packages>
	</test>

@AfterTest --> After Test will run after all classes inisde a test folder
used to close connection , delete cookies


scope is complete folders, execute first
@BeforeSuite  - set global env varibales , every new environment variables will be placed here
@BeforeSuite
	public void beforeSuite() {
		System.out.println("This will run first irrespective of number of test folders");
	}

	@AfterSuite
	public void afterSuite() {
		System.out.println("This will run after everything got executed");
	}

@BeforeMethod
suppose we have 4 @Test methods inside a class , @BeforeMethod will run after every @Test method
it scope is class file and executes before each and every @Test method in a class

@BeforeMethod
	public void beforeMethod() {
		System.out.println("runs before every @Test method");
	}
	
	@AfterMethod
	public void afterMethod() {
		System.out.println("runs after every @Test method");
	}


@BeforeClass - runs before executing any method in a class
@BeforeClass
	public void beforeClass() {
		System.out.println("runs before executing any method in a class");
	}
	
	@AfterClass
	public void afterClass() {
		System.out.println("RUns after executing all methods in a class");
	}


@BeforeMethod,@AfterMethod , @BeforeClass , @AfterClass =  are class level annotations
@BeforeTest,@AfterTest , @BeforeSuite , @AfterSuite = are testng.xml file level annotations


In TestNG the default order of execution  , is method alphabetical order
============================================================================================================================================================
Usage of groups functionality in testNG:
how can we run only some testcases , from hundreds of testcases , for this
we have a concept in testNG called groups

we need to provide a tag , to those testcases whichever we want to trigger

@Test(groups = { "Smoke" })
	public void LoginAPIHomeLoan() {
		System.out.println("Api Login Home");
	}

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE suite SYSTEM "https://testng.org/testng-1.0.dtd">
<suite name="Loan Department">
	<test name="Regression">
		<groups>
			<run>

				<include name="Smoke"></include>
			</run>
		</groups>
		<classes>
			<class name="test.Day1"></class>
			<class name="test.Day2"></class>
			<class name="test.Day3"></class>
			<class name="test.Day4"></class>
		</classes>
	</test>

</suite>


============================================================================================================================================================
Annotations helper attributes :
As we know , testcases will execute based on alphabetical order
if we have a requirement , some testcase must run before some other test method

we can use dependsOnMethods

@Test(dependsOnMethods= {"WebLoginCarLoan"})
	public void LoginAPICarLoan() {
		System.out.println("Api Login Car");
	}

now this method LoginAPICarLoan will execute only after the method WebLoginCarLoan , gets executed

we can have multiple methods also
@Test(dependsOnMethods= {"WebLoginCarLoan",MobileLoginCarLoan})
	public void LoginAPICarLoan() {
		System.out.println("Api Login Car");
	}


when we r running testcase and we r aware of a bug , and wants to skip some test method we can use
@Test(enabled = false)
	public void demo() {
		System.out.println("hello");// we will write some automation code here
	}


If we want some testcase to wait before throwing error we can use 
timeOut
The maximum number of milliseconds this test should take. If it hasn't returned after thistime, it will be marked as a FAIL.
@Test(timeOut=4000)
	public void SecondTest() {
		System.out.println("Bye");
	}


============================================================================================================================================================








============================================================================================================================================================







============================================================================================================================================================